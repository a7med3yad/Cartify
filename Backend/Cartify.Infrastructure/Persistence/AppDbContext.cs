// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Cartify.Domain.Entities;
using Cartify.Domain.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;


namespace Cartify.Infrastructure.Persistence;

public partial class AppDbContext : IdentityDbContext<TblUser>
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }


    public virtual DbSet<LkpMeasureUnite> LkpMeasureUnites { get; set; }
    public virtual DbSet<LkpOrderStatue> LkpOrderStatues { get; set; }
    public virtual DbSet<LkpPaymentType> LkpPaymentTypes { get; set; }
    public virtual DbSet<LkpProductDetailsAttribute> LkpProductDetailsAttributes { get; set; }
    public virtual DbSet<LkpPromotion> LkpPromotions { get; set; }
    public virtual DbSet<LkpShipementMethod> LkpShipementMethods { get; set; }
    public virtual DbSet<PasswordResetCode> PasswordResetCodes { get; set; }
    public virtual DbSet<TblAddress> TblAddresses { get; set; }
    public virtual DbSet<TblCategory> TblCategories { get; set; }
    public virtual DbSet<TblInventory> TblInventories { get; set; }
    public virtual DbSet<TblOrder> TblOrders { get; set; }
    public virtual DbSet<TblOrderDetail> TblOrderDetails { get; set; }
    public virtual DbSet<TblProduct> TblProducts { get; set; }
    public virtual DbSet<TblProductDetail> TblProductDetails { get; set; }
    public virtual DbSet<TblProductImage> TblProductImages { get; set; }
    public virtual DbSet<TblRefund> TblRefunds { get; set; }
    public virtual DbSet<TblReview> TblReviews { get; set; }
    public virtual DbSet<TblType> TblTypes { get; set; }
    public virtual DbSet<TblUserStore> TblUserStores { get; set; }
    public virtual DbSet<lkpAttribute> lkpAttributes { get; set; }
    public virtual DbSet<TblUser> TblUsers { get; set; }



    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        var UserId = "8e75dee3-74df-43c8-8ded-ca9179be3480";
        var MerchantId = "fdcd17c2-f208-45cc-98d1-e80720cf7896";
        var AdminId = "c9ec0699-f839-4e8d-9bd3-12685ac984ab";
        var Roles = new List<IdentityRole>();
        Roles.Add(new IdentityRole { Id = UserId, Name = "User", NormalizedName = "USER", ConcurrencyStamp = UserId });
        Roles.Add(new IdentityRole { Id = MerchantId, Name = "Merchant", NormalizedName = "MERCHANT", ConcurrencyStamp = MerchantId });
        Roles.Add(new IdentityRole { Id = AdminId, Name = "Admin", NormalizedName = "ADMIN", ConcurrencyStamp = AdminId });
        modelBuilder.Entity<IdentityRole>().HasData(Roles);


        base.OnModelCreating(modelBuilder);


        modelBuilder.Entity<LkpMeasureUnite>(entity =>
        {
            entity.HasKey(e => e.UnitOfMeasureId).HasName("PK_LkpUnitOfMeasures");

            entity.Property(e => e.UnitOfMeasureId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });
        modelBuilder.Entity<LkpOrderStatue>(entity =>
        {
            entity.HasKey(e => e.OrderStatuesId);

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });
        modelBuilder.Entity<LkpPaymentType>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK_TblPayment");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });
        modelBuilder.Entity<LkpProductDetailsAttribute>(entity =>
        {
            entity.HasKey(e => e.ProductDetailAttributeId);

            entity.HasOne(d => d.Attribute).WithMany(p => p.LkpProductDetailsAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpProductDetailsAttributes_lkpAttributes");

            entity.HasOne(d => d.MeasureUnit).WithMany(p => p.LkpProductDetailsAttributes)
                .HasForeignKey(d => d.MeasureUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpProductDetailsAttributes_LkpMeasureUnites");

            entity.HasOne(d => d.ProductDetail).WithMany(p => p.LkpProductDetailsAttributes)
                .HasForeignKey(d => d.ProductDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpProductDetailsAttributes_TblProductDetails");
        });
        modelBuilder.Entity<LkpPromotion>(entity =>
        {
            entity.HasKey(e => e.PromotionId);

            entity.Property(e => e.PromotionId).ValueGeneratedNever();
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.PromotionName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LkpShipementMethod>(entity =>
        {
            entity.HasKey(e => e.ShipementMethodId);

            entity.Property(e => e.ShipementMethodId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Fees).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PasswordResetCode>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_PasswordResetCodes_UserId");

            entity.Property(e => e.Code).IsRequired();
            entity.Property(e => e.UserId).IsRequired();
        });

        modelBuilder.Entity<TblAddress>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK_TblAdresses_1");

            entity.HasIndex(e => e.UserId, "IX_TblAddresses_UserId");

            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault).HasDefaultValue(false);
            entity.Property(e => e.PostalCode).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetAddress).HasMaxLength(50);
        });

        modelBuilder.Entity<TblCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.Property(e => e.CategoryId).ValueGeneratedNever();
            entity.Property(e => e.CategoryDescription).IsRequired();
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblInventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId);

            entity.ToTable("TblInventory");

            entity.HasIndex(e => e.ProductDetailId, "IX_TblInventory_ProductDetailId")
                .IsUnique();

            entity.Property(e => e.InventoryId).ValueGeneratedNever();

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.Property(e => e.DeletedDate)
                .HasColumnType("datetime");

            entity.HasOne(d => d.ProductDetail)
                .WithOne(p => p.Inventory)
                .HasForeignKey<TblInventory>(d => d.ProductDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblInventory_TblProductDetails1");
        });


        modelBuilder.Entity<TblOrder>(entity =>
        {
            entity.HasKey(e => e.OrderId);
            entity.HasIndex(e => e.StoreId, "IX_TblOrders_UserStoreId");

            entity.HasOne(d => d.UserStore)
                .WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.StoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_TblUserStore");

            entity.HasIndex(e => e.OrderStatuesId, "IX_TblOrders_OrderStatuesId");

            entity.HasIndex(e => e.PaymentTypeId, "IX_TblOrders_PaymentTypeId");

            entity.HasIndex(e => e.ShipmentMethodId, "IX_TblOrders_ShipmentMethodId");

            entity.Property(e => e.OrderId).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.GrantTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Tax).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.TotalDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.OrderStatues).WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.OrderStatuesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpOrderStatues");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpPaymentTypes");

            entity.HasOne(d => d.ShipmentMethod).WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.ShipmentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpShipementMethods");


        });

        modelBuilder.Entity<TblOrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId);

            entity.HasIndex(e => e.OrderId, "IX_TblOrderDetails_OrderId");

            entity.HasIndex(e => e.ProductId, "IX_TblOrderDetails_ProductId");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Order).WithMany(p => p.TblOrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrderProducts_TblOrders");

            entity.HasOne(d => d.Product).WithMany(p => p.TblOrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrderProducts_TblProducts");
        });

        modelBuilder.Entity<TblProduct>(entity =>
        {
            entity.HasKey(e => e.ProductId);

            entity.HasIndex(e => e.TypeId, "IX_TblProducts_TypeId");

            entity.HasIndex(e => e.UserStoreId, "IX_TblProducts_UserStoreId");

            entity.Property(e => e.ProductId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF__TblProduc__Creat__18EBB532")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Type).WithMany(p => p.TblProducts)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_TblTypes");

            entity.HasOne(d => d.UserStore).WithMany(p => p.TblProducts)
                .HasForeignKey(d => d.UserStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_TblUserStore1");

        });

        modelBuilder.Entity<TblProductDetail>(entity =>
        {
            entity.HasKey(e => e.ProductDetailId);

            entity.Property(e => e.ProductDetailId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SerialNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Product).WithMany(p => p.TblProductDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductDetails_TblProducts");
        });

        modelBuilder.Entity<TblProductImage>(entity =>
        {
            entity.HasIndex(e => e.ProductId, "IX_TblProductImages_ProductId");

            entity.Property(e => e.ImageURL)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Product).WithMany(p => p.TblProductImages)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductImages_TblProducts");
        });

        modelBuilder.Entity<TblRefund>(entity =>
        {
            entity.HasKey(e => e.RefundId);

            entity.HasIndex(e => e.OrderDetailId, "IX_TblRefunds_OrderDetailId");

            entity.Property(e => e.RefundId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RefundStatues)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.OrderDetail).WithMany(p => p.TblRefunds)
                .HasForeignKey(d => d.OrderDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblRefunds_TblOrderDetails");
        });

        modelBuilder.Entity<TblReview>(entity =>
        {
            entity.HasKey(e => e.ReviewId);

            entity.HasIndex(e => e.OrderDetailsId, "IX_TblReviews_OrderDetailsId");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.ReviewText).HasMaxLength(500);

            entity.HasOne(d => d.OrderDetails).WithMany(p => p.TblReviews)
                .HasForeignKey(d => d.OrderDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblReviews_TblOrderDetails");
        });

        modelBuilder.Entity<TblType>(entity =>
        {
            entity.HasKey(e => e.TypeId);

            entity.HasIndex(e => e.CategoryId, "IX_TblTypes_CategoryId");

            entity.Property(e => e.TypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.TypeDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.TblTypes)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblTypes_TblCategories");
        });
        modelBuilder.Entity<TblUserStore>(entity =>
        {
            entity.HasOne(s => s.Merchant)
                 .WithOne(u => u.UserStore)
                 .HasForeignKey<TblUser>(u => u.UserStoreId)
                 .OnDelete(DeleteBehavior.ClientSetNull)
                 .HasConstraintName("FK_TblUserStore_Merchant");
            entity.HasKey(e => e.UserStoreId);
            entity.ToTable("TblUserStore");
            entity.HasIndex(e => e.InventoryId, "IX_TblUserStore_InventoryId");


            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.StoreName).HasMaxLength(50);

            entity.HasOne(d => d.Inventory).WithMany(p => p.TblUserStores)
                .HasForeignKey(d => d.InventoryId)
                .IsRequired(false)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblUserStore_TblInventory");
        });

        modelBuilder.Entity<lkpAttribute>(entity =>
        {
            entity.HasKey(e => e.AttributeId);

            entity.Property(e => e.AttributeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });



        modelBuilder.Entity<TblUser>(entity =>
        {
            entity
              .HasMany(u => u.StoresPurchasedFrom)
              .WithMany(s => s.Customers)
              .UsingEntity<Dictionary<string, object>>(
                  "TblUserStoreCustomers",
                  j => j
                      .HasOne<TblUserStore>()
                      .WithMany()
                      .HasForeignKey("UserStoreId")
                      .HasConstraintName("FK_UserStoreCustomers_UserStore")
                      .OnDelete(DeleteBehavior.Cascade),
                  j => j
                      .HasOne<TblUser>()
                      .WithMany()
                      .HasForeignKey("UserId")
                      .HasConstraintName("FK_UserStoreCustomers_User")
                      .OnDelete(DeleteBehavior.Cascade),
                  j =>
                  {
                      j.HasKey("UserStoreId", "UserId");
                      j.ToTable("TblUserStoreCustomers");
                  });

            entity.OwnsMany(u => u.RefreshTokens, rt =>
            {
                rt.WithOwner().HasForeignKey("UserId");
                rt.Property<int>("Id");
                rt.HasKey("Id");
                rt.Property(t => t.Token).IsRequired();
                rt.Property(t => t.ExpiresOn).IsRequired();
                rt.Property(t => t.CreatedOn).IsRequired();
                rt.Property(t => t.RevokedOn);
            });

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_CreatedDate")
                .HasColumnType("datetime");

            entity.Property(e => e.DeletedDate).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IsDeleted)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_IsDeleted_1");

            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}